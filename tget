{

___x_cmd_get_log(){
    printf "[%s] %s\n" "$(date +"%Y-%m-%d/%H:%M:%S")" "$1" | tee -a "$___X_CMD_ROOT/setup.log" >&2 ;
};

___x_cmd_get_download(){
    local tmptgt="$1";
    
    local url="https://raw.githubusercontent.com/x-cmd/release/main";
    case "$___X_CMD_VERSION" in
        latest|alpha|beta)  url="$url/dist/${___X_CMD_VERSION}.tgz"         ;;
        v*)                 url="$url/dist/${___X_CMD_VERSION}/full.tgz"    ;;
        *)                  url="$url/sum/${___X_CMD_VERSION}.tgz"          ;;
    esac;
    
    local target="$tmptgt/download_tmp.tgz";
    [ ! -d "${tmptgt}" ] || {
        ___x_cmd_get_log "Folder already existed ==> There must be other process is installing x-cmd ==> $tmptgt";
        return 1;
    };

    (
        command mkdir -p "${tmptgt}"; cd "${tmptgt}";

        ___x_cmd_get_log "Download script archieve from $url";
        command curl --fail "$url" >"$target" 2>/dev/null || {
            command rm -rf "$tmptgt";
            ___x_cmd_get_log "Fail to download from: $url";
            exit 1;
        };

        ___x_cmd_get_log "Download SUCCESS: $target ( size: $(command wc -c "$target" 2>/dev/null | command awk '{print ((int($1) + 1023 ) / 1024); }') KB )";
        command tar vxf "$target" 2>>"$tmptgt/setup.log" 1>&2;
        command rm -f "$target";
        ___x_cmd_get_log "Deflation SUCCESS: $target";
    );
};

___x_cmd_get_populate(){
    local tmptgt="$1";  local sumfp="$tmptgt/.x-cmd/metadata/version_sum";
    [ ! -r "$sumfp" ] || . "$sumfp";
    [ -n "$___X_CMD_VERSION_SUM" ] || {
        ___x_cmd_get_log "Fail to get version sum from: $sumfp";
        return 1;
    };

    ___X_CMD_VERSION_SUM8="${___X_CMD_VERSION_SUM%"${___X_CMD_VERSION_SUM#????????}"}";
    local sum8dir="$___X_CMD_ROOT/v/.$___X_CMD_VERSION_SUM8";
    [ ! -e "$sum8dir" ] || {
        ___x_cmd_get_log "Folder already existed ==> $sum8dir";
        command rm -rf "${tmptgt}";
        return 0; 
    };

    command rm -rf "$sum8dir";
    command mv "${tmptgt}" "$sum8dir";
};

___x_cmd_get_xx(){
    command mkdir -p "$___X_CMD_ROOT/v";
    (
        cd "$___X_CMD_ROOT/v";

        if [ ! -d "$___X_CMD_VERSION" ]; then
            ___x_cmd_get_log "Git clone: x-cmd/$___X_CMD_VERSION";
            command git clone "git@github.com:x-cmd/$___X_CMD_VERSION.git";
        else
            ___x_cmd_get_log "Already exists: $PWD/$___X_CMD_VERSION";
            cd "$___X_CMD_VERSION";
            if [ "$(command git status -s | command wc -l)" -ne 0 ]; then
                command git status -s;
                command git stash;
                command git clean -fd;
            fi;

            command git pull origin "$(command git branch --show-current)";
        fi;
    ) 
};

___x_cmd_get_main(){
    local ___X_CMD_ROOT="$HOME/.x-cmd.root.test";
    local ___X_CMD_VERSION="${___X_CMD_TOINSTALL_VERSION:-latest}";
    local ___X_CMD_CURRENTTIME="$(date +"%Y-%m-%d_%H:%M:%S")";
    command mkdir -p "$___X_CMD_ROOT";

    ___x_cmd_get_log "------------------ $___X_CMD_CURRENTTIME";

    case "$___X_CMD_VERSION" in
        x[0-9])
            ___x_cmd_get_xx || return;
            ___X_CMD_TGET_XBIN="$___X_CMD_ROOT/v/${___X_CMD_VERSION}/mod/x-cmd/lib/bin/xbin";
            ;;
        *)
            local ___X_CMD_VERSION_SUM8=;
            local tmptgt="$___X_CMD_ROOT/v/${___X_CMD_VERSION}.$$.$___X_CMD_CURRENTTIME";
            ___x_cmd_get_download "$tmptgt" || return;
            ___x_cmd_get_populate "$tmptgt" || return;
            ___X_CMD_TGET_XBIN="$___X_CMD_ROOT/v/.${___X_CMD_VERSION_SUM8}/mod/x-cmd/lib/bin/xbin";
            ;;
    esac;

    [ -f "$___X_CMD_TGET_XBIN" ] || return;
    ___x_cmd_get_log "xbin path => $___X_CMD_TGET_XBIN";
    ___x_cmd_get_log "Test case => \`\"\${SHELL:-/bin/sh}\" \"\$___X_CMD_TGET_XBIN\" root\`";
};

___x_cmd_get_main;
}
